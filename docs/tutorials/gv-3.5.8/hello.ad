block_begin("1");
string("%!PS-Adobe-3.0"); hex(0a);
string("%%Title: hello.txt"); hex(0a);
string("%%For: "); hex(0a);
string("%%Creator: a2ps version 4.13"); hex(0a);
string("%%CreationDate: Mon Apr 24 13:31:07 2006"); hex(0a);
string("%%BoundingBox: 24 24 588 768"); hex(0a);
string("%%DocumentData: Clean7Bit"); hex(0a);
string("%%Orientation: Landscape"); hex(0a);
string("%%Pages: 1"); hex(0a);
string("%%PageOrder: Ascend"); hex(0a);
string("%%DocumentMedia: Letter 612 792 0 () ()"); hex(0a);
string("%%DocumentNeededResources: font Courier"); hex(0a);
string("%%+ font Courier-Bold"); hex(0a);
string("%%+ font Courier-BoldOblique"); hex(0a);
string("%%+ font Courier-Oblique"); hex(0a);
string("%%+ font Helvetica"); hex(0a);
string("%%+ font Helvetica-Bold"); hex(0a);
string("%%+ font Symbol"); hex(0a);
string("%%+ font Times-Bold"); hex(0a);
string("%%+ font Times-Roman"); hex(0a);
string("%%DocumentProcessColors: Black "); hex(0a);
string("%%DocumentSuppliedResources: procset a2ps-a2ps-hdr"); hex(0a);
string("%%+ procset a2ps-black+white-Prolog"); hex(0a);
string("%%+ encoding ISO-8859-1Encoding"); hex(0a);
string("%%EndComments"); hex(0a);
string("/a2psdict 200 dict def"); hex(0a);
string("a2psdict begin"); hex(0a);
string("%%BeginProlog"); hex(0a);
string("%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana"); hex(0a);
string("%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana"); hex(0a);
string("% Check PostScript language level."); hex(0a);
string("/languagelevel where {"); hex(0a);
string("  pop /gs_languagelevel languagelevel def"); hex(0a);
string("} {"); hex(0a);
string("  /gs_languagelevel 1 def"); hex(0a);
string("} ifelse"); hex(0a);
string(""); hex(0a);
string("% EPSF import as in the Red Book"); hex(0a);
string("/BeginInclude {"); hex(0a);
string("  /b4_Inc_state save def    		% Save state for cleanup"); hex(0a);
string("  /dict_count countdictstack def	% Count objects on dict stack"); hex(0a);
string("  /op_count count 1 sub def		% Count objects on operand stack "); hex(0a);
string("  userdict begin"); hex(0a);
string("    0 setgray 0 setlinecap"); hex(0a);
string("    1 setlinewidth 0 setlinejoin"); hex(0a);
string("    10 setmiterlimit [ ] 0 setdash newpath"); hex(0a);
string("    gs_languagelevel 1 ne {"); hex(0a);
string("      false setstrokeadjust false setoverprint "); hex(0a);
string("    } if"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/EndInclude {"); hex(0a);
string("  count op_count sub { pos } repeat	% Clean up stacks"); hex(0a);
string("  countdictstack dict_count sub { end } repeat"); hex(0a);
string("  b4_Inc_state restore"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/BeginEPSF {"); hex(0a);
string("  BeginInclude"); hex(0a);
string("  /showpage { } def"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/EndEPSF {"); hex(0a);
string("  EndInclude"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Page prefeed"); hex(0a);
string("/page_prefeed {         % bool -> -"); hex(0a);
string("  statusdict /prefeed known {"); hex(0a);
string("    statusdict exch /prefeed exch put"); hex(0a);
string("  } {"); hex(0a);
string("    pop"); hex(0a);
string("  } ifelse"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/deffont {"); hex(0a);
string("  findfont exch scalefont def"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/reencode_font {"); hex(0a);
string("  findfont reencode 2 copy definefont pop def"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Function c-show (str => -)"); hex(0a);
string("% centers text only according to x axis."); hex(0a);
string("/c-show { "); hex(0a);
string("  dup stringwidth pop"); hex(0a);
string("  2 div neg 0 rmoveto"); hex(0a);
string("  show"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Function l-show (str => -)"); hex(0a);
string("% prints texts so that it ends at currentpoint"); hex(0a);
string("/l-show {"); hex(0a);
string("  dup stringwidth pop neg "); hex(0a);
string("  0 "); hex(0a);
string("  rmoveto show"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% center-fit show (str w => -)"); hex(0a);
string("% show centered, and scale currentfont so that the width is less than w"); hex(0a);
string("/cfshow {"); hex(0a);
string("  exch dup stringwidth pop"); hex(0a);
string("  % If the title is too big, try to make it smaller"); hex(0a);
string("  3 2 roll 2 copy"); hex(0a);
string("  gt"); hex(0a);
string("  { % if, i.e. too big"); hex(0a);
string("    exch div"); hex(0a);
string("    currentfont exch scalefont setfont"); hex(0a);
string("  } { % ifelse"); hex(0a);
string("    pop pop "); hex(0a);
string("  }"); hex(0a);
string("  ifelse"); hex(0a);
string("  c-show			% center title"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Return the y size of the current font"); hex(0a);
string("% - => fontsize"); hex(0a);
string("/currentfontsize {"); hex(0a);
string("  currentfont /FontMatrix get 3 get 1000 mul"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% reencode the font"); hex(0a);
string("% <encoding-vector> <fontdict> -> <newfontdict>"); hex(0a);
string("/reencode { %def"); hex(0a);
string("  dup length 5 add dict begin"); hex(0a);
string("    { %forall"); hex(0a);
string("      1 index /FID ne "); hex(0a);
string("      { def }{ pop pop } ifelse"); hex(0a);
string("    } forall"); hex(0a);
string("    /Encoding exch def"); hex(0a);
string(""); hex(0a);
string("    % Use the font's bounding box to determine the ascent, descent,"); hex(0a);
string("    % and overall height; don't forget that these values have to be"); hex(0a);
string("    % transformed using the font's matrix."); hex(0a);
string("    % We use `load' because sometimes BBox is executable, sometimes not."); hex(0a);
string("    % Since we need 4 numbers an not an array avoid BBox from being executed"); hex(0a);
string("    /FontBBox load aload pop"); hex(0a);
string("    FontMatrix transform /Ascent exch def pop"); hex(0a);
string("    FontMatrix transform /Descent exch def pop"); hex(0a);
string("    /FontHeight Ascent Descent sub def"); hex(0a);
string(""); hex(0a);
string("    % Define these in case they're not in the FontInfo (also, here"); hex(0a);
string("    % they're easier to get to."); hex(0a);
string("    /UnderlinePosition 1 def"); hex(0a);
string("    /UnderlineThickness 1 def"); hex(0a);
string("    "); hex(0a);
string("    % Get the underline position and thickness if they're defined."); hex(0a);
string("    currentdict /FontInfo known {"); hex(0a);
string("      FontInfo"); hex(0a);
string("      "); hex(0a);
string("      dup /UnderlinePosition known {"); hex(0a);
string("	dup /UnderlinePosition get"); hex(0a);
string("	0 exch FontMatrix transform exch pop"); hex(0a);
string("	/UnderlinePosition exch def"); hex(0a);
string("      } if"); hex(0a);
string("      "); hex(0a);
string("      dup /UnderlineThickness known {"); hex(0a);
string("	/UnderlineThickness get"); hex(0a);
string("	0 exch FontMatrix transform exch pop"); hex(0a);
string("	/UnderlineThickness exch def"); hex(0a);
string("      } if"); hex(0a);
string("      "); hex(0a);
string("    } if"); hex(0a);
string("    currentdict "); hex(0a);
string("  end "); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Function print line number (<string> # -)"); hex(0a);
string("/# {"); hex(0a);
string("  gsave"); hex(0a);
string("    sx cw mul neg 2 div 0 rmoveto"); hex(0a);
string("    f# setfont"); hex(0a);
string("    c-show"); hex(0a);
string("  grestore"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% -------- Some routines to enlight plain b/w printings ---------"); hex(0a);
string(""); hex(0a);
string("% Underline"); hex(0a);
string("% width --"); hex(0a);
string("/dounderline {"); hex(0a);
string("  currentpoint"); hex(0a);
string("  gsave"); hex(0a);
string("    moveto"); hex(0a);
string("    0 currentfont /Descent get currentfontsize mul rmoveto"); hex(0a);
string("    0 rlineto"); hex(0a);
string("    stroke"); hex(0a);
string("  grestore"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Underline a string"); hex(0a);
string("% string --"); hex(0a);
string("/dounderlinestring {"); hex(0a);
string("  stringwidth pop"); hex(0a);
string("  dounderline"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/UL {"); hex(0a);
string("  /ul exch store"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Draw a box of WIDTH wrt current font"); hex(0a);
string("% width --"); hex(0a);
string("/dobox {"); hex(0a);
string("  currentpoint"); hex(0a);
string("  gsave"); hex(0a);
string("    newpath"); hex(0a);
string("    moveto"); hex(0a);
string("    0 currentfont /Descent get currentfontsize mul rmoveto"); hex(0a);
string("    dup 0 rlineto"); hex(0a);
string("    0 currentfont /FontHeight get currentfontsize mul rlineto"); hex(0a);
string("    neg 0 rlineto"); hex(0a);
string("    closepath"); hex(0a);
string("    stroke"); hex(0a);
string("  grestore"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/BX {"); hex(0a);
string("  /bx exch store"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Box a string"); hex(0a);
string("% string --"); hex(0a);
string("/doboxstring {"); hex(0a);
string("  stringwidth pop"); hex(0a);
string("  dobox"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("%"); hex(0a);
string("% ------------- Color routines ---------------"); hex(0a);
string("%"); hex(0a);
string("/FG /setrgbcolor load def"); hex(0a);
string(""); hex(0a);
string("% Draw the background"); hex(0a);
string("% width --"); hex(0a);
string("/dobackground {"); hex(0a);
string("  currentpoint"); hex(0a);
string("  gsave"); hex(0a);
string("    newpath"); hex(0a);
string("    moveto"); hex(0a);
string("    0 currentfont /Descent get currentfontsize mul rmoveto"); hex(0a);
string("    dup 0 rlineto"); hex(0a);
string("    0 currentfont /FontHeight get currentfontsize mul rlineto"); hex(0a);
string("    neg 0 rlineto"); hex(0a);
string("    closepath"); hex(0a);
string("    bgcolor aload pop setrgbcolor"); hex(0a);
string("    fill"); hex(0a);
string("  grestore"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Draw bg for a string"); hex(0a);
string("% string --"); hex(0a);
string("/dobackgroundstring {"); hex(0a);
string("  stringwidth pop"); hex(0a);
string("  dobackground"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string(""); hex(0a);
string("/BG {"); hex(0a);
string("  dup /bg exch store"); hex(0a);
string("  { mark 4 1 roll ] /bgcolor exch store } if"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string(""); hex(0a);
string("/Show {"); hex(0a);
string("  bg { dup dobackgroundstring } if"); hex(0a);
string("  ul { dup dounderlinestring } if"); hex(0a);
string("  bx { dup doboxstring } if"); hex(0a);
string("  show"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Function T(ab), jumps to the n-th tabulation in the current line"); hex(0a);
string("/T {"); hex(0a);
string("  cw mul x0 add"); hex(0a);
string("  bg { dup currentpoint pop sub dobackground } if"); hex(0a);
string("  ul { dup currentpoint pop sub dounderline } if"); hex(0a);
string("  bx { dup currentpoint pop sub dobox } if"); hex(0a);
string("  y0 moveto"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Function n: move to the next line"); hex(0a);
string("/n {"); hex(0a);
string("  /y0 y0 bfs sub store"); hex(0a);
string("  x0 y0 moveto"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Function N: show and move to the next line"); hex(0a);
string("/N {"); hex(0a);
string("  Show"); hex(0a);
string("  /y0 y0 bfs sub store"); hex(0a);
string("  x0 y0 moveto"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/S {"); hex(0a);
string("  Show"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("%%BeginResource: procset a2ps-a2ps-hdr 2.0 2"); hex(0a);
string("%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana"); hex(0a);
string("%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana"); hex(0a);
string("% Function title: prints page header."); hex(0a);
string("% <ct> <rt> <lt> are passed as argument"); hex(0a);
string("/title { "); hex(0a);
string("  % 1. Draw the background"); hex(0a);
string("  x v get y v get moveto"); hex(0a);
string("  gsave"); hex(0a);
string("    0 th 2 div neg rmoveto "); hex(0a);
string("    th setlinewidth"); hex(0a);
string("    0.95 setgray"); hex(0a);
string("    pw 0 rlineto stroke"); hex(0a);
string("  grestore"); hex(0a);
string("  % 2. Border it"); hex(0a);
string("  gsave"); hex(0a);
string("    0.7 setlinewidth"); hex(0a);
string("    pw 0 rlineto"); hex(0a);
string("    0 th neg rlineto"); hex(0a);
string("    pw neg 0 rlineto"); hex(0a);
string("    closepath stroke"); hex(0a);
string("  grestore"); hex(0a);
string("  % stk: ct rt lt"); hex(0a);
string("  x v get y v get th sub 1 add moveto"); hex(0a);
string("%%IncludeResource: font Helvetica"); hex(0a);
string("  fHelvetica fnfs 0.8 mul scalefont setfont"); hex(0a);
string("  % 3. The left title"); hex(0a);
string("  gsave"); hex(0a);
string("    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack"); hex(0a);
string("    fnfs 0.8 mul hm rmoveto"); hex(0a);
string("    show			% left title"); hex(0a);
string("  grestore"); hex(0a);
string("  exch"); hex(0a);
string("  % stk: ct ltw rt"); hex(0a);
string("  % 4. the right title"); hex(0a);
string("  gsave"); hex(0a);
string("    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack"); hex(0a);
string("    dup"); hex(0a);
string("    pw exch stringwidth pop fnfs 0.8 mul add sub"); hex(0a);
string("    hm"); hex(0a);
string("    rmoveto"); hex(0a);
string("    show			% right title"); hex(0a);
string("  grestore"); hex(0a);
string("  % stk: ct ltw rtw"); hex(0a);
string("  % 5. the center title"); hex(0a);
string("  gsave"); hex(0a);
string("    pw 3 1 roll"); hex(0a);
string("    % stk: ct pw ltw rtw"); hex(0a);
string("    3 copy "); hex(0a);
string("    % Move to the center of the left room"); hex(0a);
string("    sub add 2 div hm rmoveto"); hex(0a);
string("    % What is the available space in here?"); hex(0a);
string("    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub"); hex(0a);
string("    % stk: ct space_left"); hex(0a);
string("%%IncludeResource: font Helvetica-Bold"); hex(0a);
string("  fHelvetica-Bold fnfs scalefont setfont"); hex(0a);
string("    cfshow"); hex(0a);
string("  grestore"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Function border: prints virtual page border"); hex(0a);
string("/border { %def"); hex(0a);
string("  gsave				% print four sides"); hex(0a);
string("    0 setgray"); hex(0a);
string("    x v get y v get moveto"); hex(0a);
string("    0.7 setlinewidth		% of the square"); hex(0a);
string("    pw 0 rlineto"); hex(0a);
string("    0 ph neg rlineto"); hex(0a);
string("    pw neg 0 rlineto"); hex(0a);
string("    closepath stroke"); hex(0a);
string("  grestore"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Function water: prints a water mark in background"); hex(0a);
string("/water { %def"); hex(0a);
string("  gsave"); hex(0a);
string("    scx scy moveto rotate"); hex(0a);
string("%%IncludeResource: font Times-Bold"); hex(0a);
string("  fTimes-Bold 100 scalefont setfont"); hex(0a);
string("    .97 setgray"); hex(0a);
string("    dup stringwidth pop 2 div neg -50 rmoveto"); hex(0a);
string("    show"); hex(0a);
string("  grestore"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Function rhead: prints the right header"); hex(0a);
string("/rhead {  %def"); hex(0a);
string("  lx ly moveto"); hex(0a);
string("  fHelvetica fnfs 0.8 mul scalefont setfont"); hex(0a);
string("  l-show"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Function footer (cf rf lf -> -)"); hex(0a);
string("/footer {"); hex(0a);
string("  fHelvetica fnfs 0.8 mul scalefont setfont"); hex(0a);
string("  dx dy moveto"); hex(0a);
string("  show"); hex(0a);
string(""); hex(0a);
string("  snx sny moveto"); hex(0a);
string("  l-show"); hex(0a);
string("  "); hex(0a);
string("  fnx fny moveto"); hex(0a);
string("  c-show"); hex(0a);
string("} bind def"); hex(0a);
string("%%EndResource"); hex(0a);
string("%%BeginResource: procset a2ps-black+white-Prolog 2.0 1"); hex(0a);
string(""); hex(0a);
string("% Function T(ab), jumps to the n-th tabulation in the current line"); hex(0a);
string("/T { "); hex(0a);
string("  cw mul x0 add y0 moveto"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Function n: move to the next line"); hex(0a);
string("/n { %def"); hex(0a);
string("  /y0 y0 bfs sub store"); hex(0a);
string("  x0 y0 moveto"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("% Function N: show and move to the next line"); hex(0a);
string("/N {"); hex(0a);
string("  Show"); hex(0a);
string("  /y0 y0 bfs sub store"); hex(0a);
string("  x0 y0 moveto"); hex(0a);
string("}  bind def"); hex(0a);
string(""); hex(0a);
string("/S {"); hex(0a);
string("  Show"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/p {"); hex(0a);
string("  false UL"); hex(0a);
string("  false BX"); hex(0a);
string("  fCourier bfs scalefont setfont"); hex(0a);
string("  Show"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/sy {"); hex(0a);
string("  false UL"); hex(0a);
string("  false BX"); hex(0a);
string("  fSymbol bfs scalefont setfont"); hex(0a);
string("  Show"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/k {"); hex(0a);
string("  false UL"); hex(0a);
string("  false BX"); hex(0a);
string("  fCourier-Oblique bfs scalefont setfont"); hex(0a);
string("  Show"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/K {"); hex(0a);
string("  false UL"); hex(0a);
string("  false BX"); hex(0a);
string("  fCourier-Bold bfs scalefont setfont"); hex(0a);
string("  Show"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/c {"); hex(0a);
string("  false UL"); hex(0a);
string("  false BX"); hex(0a);
string("  fCourier-Oblique bfs scalefont setfont"); hex(0a);
string("  Show"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/C {"); hex(0a);
string("  false UL"); hex(0a);
string("  false BX"); hex(0a);
string("  fCourier-BoldOblique bfs scalefont setfont"); hex(0a);
string("  Show "); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/l {"); hex(0a);
string("  false UL"); hex(0a);
string("  false BX"); hex(0a);
string("  fHelvetica bfs scalefont setfont"); hex(0a);
string("  Show"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/L {"); hex(0a);
string("  false UL"); hex(0a);
string("  false BX"); hex(0a);
string("  fHelvetica-Bold bfs scalefont setfont"); hex(0a);
string("  Show "); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/str{"); hex(0a);
string("  false UL"); hex(0a);
string("  false BX"); hex(0a);
string("  fTimes-Roman bfs scalefont setfont"); hex(0a);
string("  Show"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("/e{"); hex(0a);
string("  false UL"); hex(0a);
string("  true BX"); hex(0a);
string("  fHelvetica-Bold bfs scalefont setfont"); hex(0a);
string("  Show"); hex(0a);
string("} bind def"); hex(0a);
string(""); hex(0a);
string("%%EndResource"); hex(0a);
string("%%EndProlog"); hex(0a);
string("%%BeginSetup"); hex(0a);
string("%%IncludeResource: font Courier"); hex(0a);
string("%%IncludeResource: font Courier-Oblique"); hex(0a);
string("%%IncludeResource: font Courier-Bold"); hex(0a);
string("%%IncludeResource: font Times-Roman"); hex(0a);
string("%%IncludeResource: font Symbol"); hex(0a);
string("%%IncludeResource: font Courier-BoldOblique"); hex(0a);
string("%%BeginResource: encoding ISO-8859-1Encoding"); hex(0a);
string("/ISO-8859-1Encoding ["); hex(0a);
string("/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef "); hex(0a);
string("/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef "); hex(0a);
string("/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef "); hex(0a);
string("/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef "); hex(0a);
string("/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright "); hex(0a);
string("/parenleft /parenright /asterisk /plus /comma /minus /period /slash "); hex(0a);
string("/zero /one /two /three /four /five /six /seven "); hex(0a);
string("/eight /nine /colon /semicolon /less /equal /greater /question "); hex(0a);
string("/at /A /B /C /D /E /F /G "); hex(0a);
string("/H /I /J /K /L /M /N /O "); hex(0a);
string("/P /Q /R /S /T /U /V /W "); hex(0a);
string("/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore "); hex(0a);
string("/quoteleft /a /b /c /d /e /f /g "); hex(0a);
string("/h /i /j /k /l /m /n /o "); hex(0a);
string("/p /q /r /s /t /u /v /w "); hex(0a);
string("/x /y /z /braceleft /bar /braceright /asciitilde /.notdef "); hex(0a);
string("/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef "); hex(0a);
string("/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef "); hex(0a);
string("/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef "); hex(0a);
string("/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef "); hex(0a);
string("/space /exclamdown /cent /sterling /currency /yen /brokenbar /section "); hex(0a);
string("/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron "); hex(0a);
string("/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet "); hex(0a);
string("/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown "); hex(0a);
string("/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla "); hex(0a);
string("/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis "); hex(0a);
string("/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply "); hex(0a);
string("/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls "); hex(0a);
string("/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla "); hex(0a);
string("/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis "); hex(0a);
string("/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide "); hex(0a);
string("/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis "); hex(0a);
string("] def"); hex(0a);
string("%%EndResource"); hex(0a);
string("% Initialize page description variables."); hex(0a);
string("/sh 612 def"); hex(0a);
string("/sw 792 def"); hex(0a);
string("/llx 24 def"); hex(0a);
string("/urx 768 def"); hex(0a);
string("/ury 588 def"); hex(0a);
string("/lly 24 def"); hex(0a);
string("/#copies 1 def"); hex(0a);
string("/th 15.000000 def"); hex(0a);
string("/fnfs 11 def"); hex(0a);
string("/bfs 7.493857 def"); hex(0a);
string("/cw 4.496314 def"); hex(0a);
string(""); hex(0a);
string("% Dictionary for ISO-8859-1 support"); hex(0a);
string("/iso1dict 8 dict begin"); hex(0a);
string("  /fCourier ISO-8859-1Encoding /Courier reencode_font"); hex(0a);
string("  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font"); hex(0a);
string("  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font"); hex(0a);
string("  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font"); hex(0a);
string("  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font"); hex(0a);
string("  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font"); hex(0a);
string("  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font"); hex(0a);
string("  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font"); hex(0a);
string("currentdict end def"); hex(0a);
string("/bgcolor [ 0 0 0 ] def"); hex(0a);
string("/bg false def"); hex(0a);
string("/ul false def"); hex(0a);
string("/bx false def"); hex(0a);
string("% The font for line numbering"); hex(0a);
string("/f# /Helvetica findfont bfs .6 mul scalefont def"); hex(0a);
string("/fSymbol /Symbol findfont def"); hex(0a);
string("/hm fnfs 0.25 mul def"); hex(0a);
string("/pw"); hex(0a);
string("   cw 81.400000 mul"); hex(0a);
string("def"); hex(0a);
string("/ph"); hex(0a);
string("   522.321860 th add"); hex(0a);
string("def"); hex(0a);
string("/pmw urx llx sub pw 2 mul sub 1 div def"); hex(0a);
string("/pmh 0 def"); hex(0a);
string("/v 0 def"); hex(0a);
string("/x ["); hex(0a);
string("  0"); hex(0a);
string("  dup pmw add pw add"); hex(0a);
string("] def"); hex(0a);
string("/y ["); hex(0a);
string("  pmh ph add 0 mul ph add"); hex(0a);
string("  dup"); hex(0a);
string("] def"); hex(0a);
string("/scx sw 2 div def"); hex(0a);
string("/scy sh 2 div def"); hex(0a);
string("/snx urx def"); hex(0a);
string("/sny lly 2 add def"); hex(0a);
string("/dx llx def"); hex(0a);
string("/dy sny def"); hex(0a);
string("/fnx scx def"); hex(0a);
string("/fny dy def"); hex(0a);
string("/lx snx def"); hex(0a);
string("/ly ury fnfs 0.8 mul sub def"); hex(0a);
string("/sx 0 def"); hex(0a);
string("/tab 8 def"); hex(0a);
string("/x0 0 def"); hex(0a);
string("/y0 0 def"); hex(0a);
string("%%EndSetup"); hex(0a);
string(""); hex(0a);
string("%%Page: (1) 1"); hex(0a);
string("%%BeginPageSetup"); hex(0a);
string("/pagesave save def"); hex(0a);
string("sh 0 translate 90 rotate"); hex(0a);
string("%%EndPageSetup"); hex(0a);
string("iso1dict begin"); hex(0a);
string("gsave"); hex(0a);
string("llx lly 12 add translate"); hex(0a);
string("/v 0 store"); hex(0a);
string("/x0 x v get 3.147420 add sx cw mul add store"); hex(0a);
string("/y0 y v get bfs th add sub store"); hex(0a);
string("x0 y0 moveto"); hex(0a);
string("(Hello World!) p n"); hex(0a);
string("(hello.txt) (Page 1/1) (Apr 24, 06 13:14) title"); hex(0a);
string("border"); hex(0a);
string("grestore"); hex(0a);
string("(Printed by ) rhead"); hex(0a);
string("(hello.txt) (1/1) (Monday April 24, 2006) footer"); hex(0a);
string("end % of iso1dict"); hex(0a);
string("pagesave restore"); hex(0a);
string("showpage"); hex(0a);
string(""); hex(0a);
string("%%Trailer"); hex(0a);
string("end"); hex(0a);
string("%%EOF"); hex(0a);
block_end("1");
send("1");
